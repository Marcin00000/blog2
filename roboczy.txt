

<!doctype html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Blog</title>
    <link rel="stylesheet" href="style.css" type="text/css">
    <link href="comm/comments.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css">
    <link rel="stylesheet" href="fontawesome6.5.1-web/css/all.css">
</head>
<style>
    .game {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        margin: 0;
        flex-direction: column;
    }

    #game-controls {
        margin-bottom: 20px;
    }

    #game-board {
        display: grid;
        gap: 5px;
        grid-template-columns: repeat(var(--board-size, 4), 50px);
        grid-template-rows: repeat(var(--board-size, 4), 50px);
    }

    .tile {
        width: 50px;
        height: 50px;
        background-color: #ccc;
        text-align: center;
        line-height: 50px;
        font-size: 18px;
        cursor: pointer;
    }
</style>
<body>
<div class="container">
<div class="game">

<div id="game-controls">
    <label for="difficulty">Choose difficulty:</label>
    <select id="difficulty">
        <option value="4">Easy (4x4)</option>
        <option value="6">Medium (6x6)</option>
        <option value="8">Hard (8x8)</option>
    </select>
    <button id="start-button">Start Game</button>
</div>
<p>Moves: <span id="move-counter">0</span> | Matches: <span id="match-counter">0</span></p>
<div id="game-board"></div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<script>
    $(document).ready(function() {
        let boardSize = 4;
        let tiles = [];
        let flippedTiles = [];
        let moves = 0;
        let matches = 0;

        function initializeBoard() {
            // Generate pairs of random numbers for tiles
            const pairs = [];
            for (let i = 0; i < boardSize * boardSize / 2; i++) {
                pairs.push(i + 1);
                pairs.push(i + 1);
            }

            // Shuffle the pairs
            pairs.sort(() => Math.random() - 0.5);

            // Create and append tiles to the game board
            const gameBoard = $("#game-board");
            gameBoard.empty(); // Clear the previous board
            gameBoard.css("--board-size", boardSize);
            for (let i = 0; i < boardSize * boardSize; i++) {
                const tile = $("<div>").addClass("tile").attr("data-id", i);
                gameBoard.append(tile);
                tiles.push({
                    id: i,
                    value: pairs[i],
                    flipped: false
                });

                tile.click(function() {
                    flipTile($(this));
                });
            }
        }

        function flipTile(tile) {
            const tileId = tile.data("id");
            const selectedTile = tiles[tileId];

            if (!selectedTile.flipped && flippedTiles.length < 2) {
                // Flip the tile
                tile.text(selectedTile.value);
                selectedTile.flipped = true;
                flippedTiles.push(selectedTile);

                // Check for a match after flipping two tiles
                if (flippedTiles.length === 2) {
                    const tile1 = flippedTiles[0];
                    const tile2 = flippedTiles[1];

                    // Increase moves count
                    moves++;
                    $("#move-counter").text(moves);

                    if (tile1.value === tile2.value && tile1.id !== tile2.id) {
                        // Match found
                        matches++;
                        $("#match-counter").text(matches);
                        if (matches === boardSize * boardSize / 2) {
                            // All matches found, game over
                            $("#game-board").trigger("gameover");
                            alert("Congratulations! You've matched all tiles in " + moves + " moves. Game over!");

                        }
                        flippedTiles = [];
                    } else {
                        // No match, flip the tiles back after a short delay
                        setTimeout(function() {
                            $(".tile[data-id='" + tile1.id + "'], .tile[data-id='" + tile2.id + "']").text("").removeClass("flipped");
                            tile1.flipped = false;
                            tile2.flipped = false;
                            flippedTiles = [];
                        }, 1000);
                    }
                }
            }
        }

        function saveGameResults() {

            // Przesyłamy wyniki gry do serwera PHP za pomocą AJAX
            $.ajax({
                type: "POST",
                url: "saveResults.php", // Wpisz ścieżkę do pliku PHP
                data: {
                    moves: moves,
                    matches: matches,
                    boardSize: boardSize
                },
                success: function(response) {
                    console.log(response);
                },
                error: function(error) {
                    console.error(error);
                }
            });
        }


        function startGame() {
            boardSize = parseInt($("#difficulty").val(), 10);
            tiles = [];
            flippedTiles = [];
            moves = 0;
            matches = 0;
            $("#move-counter").text(moves);
            $("#match-counter").text(matches);
            initializeBoard();
        }

        // Event listener for the start button
        $("#start-button").click(function() {
            startGame();
        });

        // Event listener for saving game results
        $("#game-board").on("gameover", function() {
            saveGameResults();
        });

        // Initial board setup
        initializeBoard();
    });
</script>
</div>
</div>
</body>
</html>

<?php
// Update the details below with your MySQL details
$DATABASE_HOST = 'localhost';
$DATABASE_USER = 'root';
$DATABASE_PASS = '';
$DATABASE_NAME = 'blog';
try {
    $pdo = new PDO('mysql:host=' . $DATABASE_HOST . ';dbname=' . $DATABASE_NAME . ';charset=utf8', $DATABASE_USER, $DATABASE_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $exception) {
    // If there is an error with the connection, stop the script and display the error
    exit('Nie udało się połączyć z bazą danych: ' . $exception->getMessage());
}
// Below function will convert datetime to time elapsed string
function time_elapsed_string($datetime, $full = false) {
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);
    $w = floor($diff->d / 7);
    $diff->d -= $w * 7;
    $string = ['y' => 'year','m' => 'month','w' => 'week','d' => 'day','h' => 'hour','i' => 'minute','s' => 'second'];
    foreach ($string as $k => &$v) {
        if ($k == 'w' && $w) {
            $v = $w . ' week' . ($w > 1 ? 's' : '');
        } else if (isset($diff->$k) && $diff->$k) {
            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
        } else {
            unset($string[$k]);
        }
    }
    if (!$full) $string = array_slice($string, 0, 1);
    return $string ? implode(', ', $string) . ' ago' : 'just now';
}
// This function will populate the comments and comments replies using a loop
function show_comments($comments, $parent_id = -1) {
    $html = '';
    if ($parent_id != -1) {
        // If the comments are replies sort them by the "submit_date" column
        array_multisort(array_column($comments, 'submit_date'), SORT_ASC, $comments);
    }
    // Iterate the comments using the foreach loop
    foreach ($comments as $comment) {
        if ($comment['parent_id'] == $parent_id) {
            // Add the comment to the $html variable
            $html .= '
            <div class="comment">
                <div>
                    <h3 class="name">' . htmlspecialchars($comment['name'], ENT_QUOTES) . '</h3>
                    <span class="date">' . time_elapsed_string($comment['submit_date']) . '</span>
                </div>
                <p class="content">' . nl2br(htmlspecialchars($comment['content'], ENT_QUOTES)) . '</p>
                <a class="reply_comment_btn" href="#" data-comment-id="' . $comment['id'] . '">Odpowiedz</a>
                ' . show_write_comment_form($comment['id']) . '
                <div class="replies">
                ' . show_comments($comments, $comment['id']) . '
                </div>
            </div>
            ';
        }
    }
    return $html;
}
// This function is the template for the write comment form
function show_write_comment_form($parent_id = -1) {
    $html = '
    <div class="write_comment" data-comment-id="' . $parent_id . '">
        <form>
            <input name="parent_id" type="hidden" value="' . $parent_id . '">
            <input name="name" type="text" placeholder="Twoje imię" required>
            <textarea name="content" placeholder="Napisz tutaj swój komentarz..." required></textarea>
            <button type="submit">Prześlij komentarz</button>
        </form>
    </div>
    ';
    return $html;
}
// Page ID needs to exist, this is used to determine which comments are for which page
if (isset($_GET['page_id'])) {
    // Check if the submitted form variables exist
    if (isset($_POST['name'], $_POST['content'])) {
        // POST variables exist, insert a new comment into the MySQL comments table (user submitted form)
        $stmt = $pdo->prepare('INSERT INTO comments (page_id, parent_id, name, content, submit_date) VALUES (?,?,?,?,NOW())');
        $stmt->execute([ $_GET['page_id'], $_POST['parent_id'], $_POST['name'], $_POST['content'] ]);
        exit('Your comment has been submitted!');
    }
    // Get all comments by the Page ID ordered by the submit date
    $stmt = $pdo->prepare('SELECT * FROM comments WHERE page_id = ? ORDER BY submit_date DESC');
    $stmt->execute([ $_GET['page_id'] ]);
    $comments = $stmt->fetchAll(PDO::FETCH_ASSOC);
    // Get the total number of comments
    $stmt = $pdo->prepare('SELECT COUNT(*) AS total_comments FROM comments WHERE page_id = ?');
    $stmt->execute([ $_GET['page_id'] ]);
    $comments_info = $stmt->fetch(PDO::FETCH_ASSOC);
} else {
    exit('No page ID specified!');
}
?>
<div class="comment_header">
    <span class="total"><?=$comments_info['total_comments']?> comments</span>
    <a href="#" class="write_comment_btn" data-comment-id="-1">Napisz komentarz</a>
</div>

<?=show_write_comment_form()?>

<?=show_comments($comments)?>

